#ifndef _KORALI_SOLVERHPP_
#define _KORALI_SOLVERHPP_

#include "libco.h"
#include "modules/experiment/experiment.hpp"
#include "modules/module.hpp"
#include <string>
#include <vector>

/*! \namespace Korali
    \brief The Korali namespace includes all Korali-specific functions, variables, and modules.
*/
namespace korali
{
class Solver : public korali::Module
{
  public:
  /**
  * @brief Prints solver information before the execution of the current generation.
  */
  virtual void printGenerationBefore(){};

  /**
 * @brief Prints solver information after the execution of the current generation.
 */
  virtual void printGenerationAfter(){};

  /**
 * @brief Runs the current generation.
 */
  virtual void runGeneration() = 0;

  /**
  * @brief Initializes the solver with starting values for the first generation.
 */
  virtual void setInitialConfiguration(){};

  /**
    * @brief For solver modules which have been trained, test returns an infered output batch, from a batch of inputs to process.
    * @param inputBatch The inputs from which to infer outputs.
    * @return The inferred outputs
   */
  virtual std::vector<std::vector<double>> test(const std::vector<std::vector<double>> &inputBatch);

  /**
  * @brief Stores termination criteria for the module.
  */
  std::vector<std::string> _terminationCriteria;
};

} // namespace korali

#endif // _KORALI_SOLVERHPP_
