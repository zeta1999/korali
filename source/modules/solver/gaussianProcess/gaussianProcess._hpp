#ifndef _KORALI_SOLVER_GAUSSIAN_PROCESS_HPP_
#define _KORALI_SOLVER_GAUSSIAN_PROCESS_HPP_

#include "engine.hpp"
#include "gp/gp.h"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/supervisedLearning/supervisedLearning.hpp"
#include "modules/solver/solver.hpp"

namespace korali
{
namespace solver
{
class GaussianProcess : public korali::Solver
{
  public:
  /**
  * @brief Korali engine for optimizing NN weights and biases
  */
  korali::problem::SupervisedLearning *_problem;

  /**
  * @brief Pointer to the gaussian processes library
  */
  libgp::GaussianProcess *_gp;

  /**
  * @brief Korali engine for optimizing the GP's parameters
  */
  korali::Engine _koraliEngine;

  /**
  * @brief Korali experiment for optimizing the GP's parameters
  */
  korali::Experiment _koraliExperiment;

  /**
  * @brief Model function to evaluate the error function of the GP
  * @param sample The sample containing the proposal parameters
  * @param gp Pointer to the GP
  */
  static void runSample(korali::Sample &sample, libgp::GaussianProcess *gp);

  std::vector<std::vector<double>> test(const std::vector<std::vector<double>> &input) override;

  void initialize() override;
  void runGeneration() override;
  void printGenerationAfter() override;
};
} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVER_GAUSSIAN_PROCESS_HPP_
